{"version":3,"sources":["components/molecules/Dropzone.module.scss","routes/Publish/Files/Ipfs/Status.module.scss","routes/Publish/Files/Ipfs/Form.module.scss","hooks/use-ipfs-api.tsx","utils/utils.ts","components/molecules/Dropzone.tsx","routes/Publish/Files/Ipfs/Status.tsx","routes/Publish/Files/Ipfs/Form.tsx","routes/Publish/Files/Ipfs/index.tsx"],"names":["module","exports","dropzone","dragover","disabled","dropzoneFiles","message","success","error","ipfsForm","ipfs","ipfsMessage","ipfsVersion","formatBytes","a","b","d","f","Math","floor","log","parseFloat","pow","toFixed","streamFiles","files","Promise","resolve","reject","stream","addReadableStream","wrapWithDirectory","on","data","Logger","concat","path","hash","write","end","pingUrl","_x","_pingUrl","apply","this","arguments","_callee","url","regenerator_default","wrap","_context","prev","next","axios","sent","status","abrupt","t0","stop","Dropzone","_ref","handleOnDrop","multiple","onDrop","useCallback","acceptedFiles","_useDropzone","useDropzone","getRootProps","getInputProps","isDragActive","isDragReject","map","file","react_default","createElement","key","size","Fragment","length","className","styles","Status","classes","isIpfsReady","Form","children","ipfsError","Label","htmlFor","required","Ipfs","addFile","_ref2","URL","ipfsNodeUri","hostname","port","_useIpfsApi","config","_useState","useState","Boolean","_useState2","Object","slicedToArray","setIpfsReady","_useState3","_useState4","setIpfsError","useEffect","_initIpfs","asyncToGenerator","mark","version","ipfsClient","host","t1","t2","id","t3","t4","initIpfs","useIpfsApi","protocol","replace","loading","setLoading","setMessage","_useState5","_useState6","fileSize","setFileSize","_useState7","fileSizeReceived","_useState9","_useState10","setError","addToIpfs","_addToIpfs","cid","console","_handleOnDrop","_callee2","totalSize","fileDetails","urlGateway","_context2","content","ipfsGatewayUri","Spinner","_x2"],"mappings":"mbACAA,EAAAC,QAAA,CAAkBC,SAAA,2BAAAC,SAAA,oDAAAC,SAAA,oDAAAC,cAAA,uDCAlBL,EAAAC,QAAA,CAAkBK,QAAA,wBAAAC,QAAA,8CAAAC,MAAA,mECAlBR,EAAAC,QAAA,CAAkBQ,SAAA,0ICIdC,EAAY,KACZC,EAAc,GACdC,EAAc,qECJX,SAASC,EAAYC,EAAWC,GACnC,GAAU,IAAND,EAAS,MAAO,UACpB,IACME,EAAID,GAAK,EAETE,EAAIC,KAAKC,MAAMD,KAAKE,IAAIN,GAAKI,KAAKE,IAH9B,OAKV,OAAOC,YAAYP,EAAII,KAAKI,IALlB,KAKyBL,IAAIM,QAAQP,IAAM,IAH3C,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAGDC,GAO1D,SAASO,EAAYd,EAAWe,GACnC,OAAO,IAAIC,QAAQ,SAACC,EAASC,GACzB,IAAMC,EAASnB,EAAKoB,kBAAkB,CAClCC,mBAAmB,IAKvBF,EAAOG,GAAG,OAAQ,SAACC,GACfC,SAAOd,IAAP,SAAAe,OAAoBF,EAAKG,KAAzB,WAAAD,OAAuCF,EAAKI,OAE1B,KAAdJ,EAAKG,MAAaT,EAAQM,EAAKI,QAGvCR,EAAOG,GAAG,QAASJ,GACnBC,EAAOS,MAAMb,GACbI,EAAOU,QAIR,SAAeC,EAAtBC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,EAAuBC,GAAvB,OAAAC,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEwBC,IAAMN,GAF9B,cAGyB,MAHzBG,EAAAI,KAGcC,QAAgBrB,SAAO1B,MAAP,cAAA2B,OAA2BY,IAExDb,SAAOd,IAAP,eAAAe,OAA0BY,IAL3BG,EAAAM,OAAA,UAMQ,GANR,OAAAN,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAQChB,SAAO1B,MAAM0C,EAAAO,GAAMnD,SARpB,eAAA4C,EAAAM,OAAA,UAUI,GAVJ,yBAAAN,EAAAQ,SAAAZ,EAAA,wCChCQ,SAASa,EAATC,GAQZ,IAPCC,EAODD,EAPCC,aACAzD,EAMDwD,EANCxD,SACA0D,EAKDF,EALCE,SAMMC,EAASC,sBAAY,SAAAC,GAAa,OAAIJ,EAAaI,IAAgB,CACrEJ,IAFLK,EAWKC,YAAY,CAAEJ,WALdE,EANLC,EAMKD,cACAG,EAPLF,EAOKE,aACAC,EARLH,EAQKG,cACAC,EATLJ,EASKI,aACAC,EAVLL,EAUKK,aAGE9C,EAAQwC,EAAcO,IAAI,SAACC,GAAD,OAC5BC,EAAA5D,EAAA6D,cAAA,MAAIC,IAAKH,EAAKrC,MACTqC,EAAKrC,KADV,MACmBvB,EAAY4D,EAAKI,KAAM,MAI9C,OACIH,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAAgE,SAAA,KACKb,EAAcc,OAAS,EACpBL,EAAA5D,EAAA6D,cAAA,SAAOK,UAAWC,IAAO5E,eACrBqE,EAAA5D,EAAA6D,cAAA,UAAKlD,IAGTiD,EAAA5D,EAAA6D,cAAA,MACQP,EAAa,CACbY,UAAWV,EACLW,IAAO9E,SACPC,EACA6E,IAAO7E,SACP6E,IAAO/E,WAGjBwE,EAAA5D,EAAA6D,cAAA,QAAWN,EAAc,CAAEP,cAC3BY,EAAA5D,EAAA6D,cAAA,SACKL,IAAiBC,EAAjB,yBAEKT,EAAQ,4JCjDvB,SAASoB,EAATtB,GAQZ,IAPCtD,EAODsD,EAPCtD,QACAE,EAMDoD,EANCpD,MAOM2E,EADPvB,EALCwB,YAOMH,IAAO1E,QACPC,EACAyE,IAAOzE,MACPyE,IAAO3E,QACb,OAAOoE,EAAA5D,EAAA6D,cAAA,OAAKK,UAAWG,GAAU3E,GAASF,0BCZ/B,SAAS+E,EAATzB,GAYZ,IAXC0B,EAWD1B,EAXC0B,SACA3E,EAUDiD,EAVCjD,YACA4E,EASD3B,EATC2B,UACAH,EAQDxB,EARCwB,YACA5E,EAODoD,EAPCpD,MAQA,OACIkE,EAAA5D,EAAA6D,cAAA,OAAKK,UAAWC,IAAOxE,UACnBiE,EAAA5D,EAAA6D,cAACa,EAAA,EAAD,CAAOC,QAAQ,aAAaC,UAAQ,GAApC,oBAGCJ,EACDZ,EAAA5D,EAAA6D,cAACO,EAAD,CACI5E,QAASK,EACTyE,YAAaA,EACb5E,MAAO+E,GAAa/E,KClBrB,SAASmF,EAAT/B,GAA2D,IAA3CgC,EAA2ChC,EAA3CgC,QAA2CC,EACjC,IAAIC,IAAIC,KAArCC,EAD8DH,EAC9DG,SAAUC,EADoDJ,EACpDI,KADoDC,ELM3D,SAAoBC,GAAoB,IAAAC,EACfC,mBAASC,QAAQ5F,IADF6F,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAC5ChB,EAD4CmB,EAAA,GAC/BG,EAD+BH,EAAA,GAAAI,EAEjBN,mBAAS,IAFQO,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAE5CpB,EAF4CqB,EAAA,GAEjCC,EAFiCD,EAAA,GAqCnD,OAjCAE,oBAAU,WAAM,SAAAC,IAAA,OAAAA,EAAAP,OAAAQ,EAAA,EAAAR,CAAAxD,EAAAlC,EAAAmG,KACZ,SAAAnE,IAAA,IAAAoE,EAAA,OAAAlE,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACiB,OAAT1C,EADR,CAAAwC,EAAAE,KAAA,eAAAF,EAAAM,OAAA,wBAGI7C,EAAc,2BAHlBuC,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAOqB+D,IAAWhB,GAPhC,cAOQzF,EAPRwC,EAAAI,KAAAJ,EAAAE,KAAA,EAQ8B1C,EAAKwG,UARnC,OAQcA,EARdhE,EAAAI,KASQ1C,EAAcsG,EAAQA,QACtBvG,EAAW,gBAAAwB,OAAmBgE,EAAOiB,MAV7ClE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAYQ2D,EAAY,0BAAA1E,OAA2Be,EAAAO,GAAMnD,UAZrD,eAAA4C,EAAAmE,GAcIX,EAdJxD,EAAAoE,GAciBhB,QAdjBpD,EAAAE,KAAA,GAc+B1C,EAAK6G,KAdpC,QAAArE,EAAAsE,GAAAtE,EAAAI,KAAAJ,EAAAuE,IAAA,EAAAvE,EAAAoE,IAAApE,EAAAsE,KAAA,EAAAtE,EAAAmE,IAAAnE,EAAAuE,IAAA,yBAAAvE,EAAAQ,SAAAZ,EAAA,mBADYH,MAAAC,KAAAC,YAAA,WAAAkE,EAAApE,MAAAC,KAAAC,WAkBZ6E,IACD,CAACvB,IAEJW,oBAAU,WACN,OAAO,WACCpG,IACAgG,GAAa,GACbhG,EAAO,KACPC,EAAc,GACdC,EAAc,GACdiG,EAAa,OAGtB,IAEI,CAAEnG,OAAME,cAAawE,cAAaG,YAAW5E,eKlCEgH,CANvB,CAC3BC,SAJkE/B,EAC9C+B,SAGDC,QAAQ,IAAK,IAChCT,KAAMpB,EACNC,KAAMA,GAAQ,QAGVvF,EAT8DwF,EAS9DxF,KAAM0E,EATwDc,EASxDd,YAAaG,EAT2CW,EAS3CX,UAAW5E,EATgCuF,EAShCvF,YATgCyF,EAUxCC,oBAAS,GAV+BE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAU/D0B,EAV+DvB,EAAA,GAUtDwB,EAVsDxB,EAAA,GAAAI,EAWxCN,mBAAS,IAX+BO,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAW/DrG,EAX+DsG,EAAA,GAWtDoB,EAXsDpB,EAAA,GAAAqB,EAYtC5B,mBAAS,IAZ6B6B,EAAA1B,OAAAC,EAAA,EAAAD,CAAAyB,EAAA,GAY/DE,EAZ+DD,EAAA,GAYrDE,EAZqDF,EAAA,GAAAG,EAa3ChC,mBAAS,IAA7BiC,EAb+D9B,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,MAAAE,EAc5ClC,mBAAS,IAdmCmC,EAAAhC,OAAAC,EAAA,EAAAD,CAAA+B,EAAA,GAc/D/H,EAd+DgI,EAAA,GAcxDC,EAdwDD,EAAA,YAuBvDE,EAvBuDjG,GAAA,OAAAkG,EAAAhG,MAAAC,KAAAC,WAAA,SAAA8F,IAAA,OAAAA,EAAAnC,OAAAQ,EAAA,EAAAR,CAAAxD,EAAAlC,EAAAmG,KAuBtE,SAAAnE,EAAyBb,GAAzB,IAAA2G,EAAA,OAAA5F,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE0B5B,EAAYd,EAAMuB,GAF5C,cAEc2G,EAFd1F,EAAAI,KAGQuF,QAAQzH,IAAR,eAAAe,OAA2ByG,IAHnC1F,EAAAM,OAAA,SAIeoF,GAJf,OAAA1F,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAMQuF,EAAQ,0BAAAtG,OAA2Be,EAAAO,GAAMnD,UACzCyH,GAAW,GAPnB,yBAAA7E,EAAAQ,SAAAZ,EAAA,kBAvBsEH,MAAAC,KAAAC,WAAA,SAAAiG,IAAA,OAAAA,EAAAtC,OAAAQ,EAAA,EAAAR,CAAAxD,EAAAlC,EAAAmG,KAkCtE,SAAA8B,EAA4B9E,GAA5B,IAAAQ,EAAArC,EAAAyC,EAAAmE,EAAAC,EAAAL,EAAAM,EAAAnG,EAAA,OAAAC,EAAAlC,EAAAmC,KAAA,SAAAkG,GAAA,cAAAA,EAAAhG,KAAAgG,EAAA/F,MAAA,UACSa,EAAc,GADvB,CAAAkF,EAAA/F,KAAA,eAAA+F,EAAA3F,OAAA,wBAGIuE,GAAW,GACXU,EAAS,IAEHhE,EAAOR,EAAc,GACnB7B,EAAeqC,EAAfrC,KAAMyC,EAASJ,EAATI,KACRmE,EAAYnI,EAAYgE,EAAM,GACpCuD,EAAYY,GAGNC,EAAc,CAAE7G,OAAMgH,QAAS3E,GAZzC0E,EAAA/F,KAAA,GAcsBsF,EAAUO,GAdhC,WAcUL,EAdVO,EAAA7F,KAAA,CAAA6F,EAAA/F,KAAA,gBAAA+F,EAAA3F,OAAA,yBAmBU0F,EAnBV,GAAA/G,OAmB0BkH,IAnB1B,UAAAlH,OAmBiDyG,EAnBjD,KAAAzG,OAmBwDC,GAC9CW,EApBV,UAAAZ,OAoB0ByG,EApB1B,KAAAzG,OAoBiCC,GAE7B4F,EAAW,6BAtBfmB,EAAA/F,KAAA,GAwB8BZ,EAAQ0G,GAxBtC,QAAAC,EAAA7F,MA0BmBsC,EAAQ7C,GA1B3B,yBAAAoG,EAAAzF,SAAAqF,OAlCsEpG,MAAAC,KAAAC,WA+DtE,OA/CAiE,oBAAU,WACNkB,EAAU,6CAAA7F,OAEImG,GAAoB,EAFxB,KAAAnG,OAE6BgG,EAF7B,oBAIX,CAACA,EAAUG,IA2CV5D,EAAA5D,EAAA6D,cAACU,EAAD,CACI7E,MAAOA,EACPG,YAAaA,EACb4E,UAAWA,EACXH,YAAaA,GAEZ0C,EACGpD,EAAA5D,EAAA6D,cAAC2E,EAAA,EAAD,CAAShJ,QAASA,IAElBoE,EAAA5D,EAAA6D,cAAChB,EAAD,CACIG,UAAU,EACVD,aA3EsD,SAAA0F,GAAA,OAAAT,EAAAnG,MAAAC,KAAAC,YA4EtDzC,UAAWgF","file":"static/js/4.2e4d9c7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropzone\":\"Dropzone_dropzone__2EKog\",\"dragover\":\"Dropzone_dragover__cVJpt Dropzone_dropzone__2EKog\",\"disabled\":\"Dropzone_disabled__3-wHL Dropzone_dropzone__2EKog\",\"dropzoneFiles\":\"Dropzone_dropzoneFiles__1qebj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Status_message__3kYlt\",\"success\":\"Status_success__3hK9i Status_message__3kYlt\",\"error\":\"Status_error__2VAEo Status_message__3kYlt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ipfsForm\":\"Form_ipfsForm__HhFlV\"};","/* eslint-disable no-console */\n\nimport { useEffect, useState } from 'react'\nimport ipfsClient from 'ipfs-http-client'\n\nlet ipfs: any = null\nlet ipfsMessage = ''\nlet ipfsVersion = ''\n\nexport interface IpfsConfig {\n    protocol: string\n    host: string\n    port: string\n}\n\nexport default function useIpfsApi(config: IpfsConfig) {\n    const [isIpfsReady, setIpfsReady] = useState(Boolean(ipfs))\n    const [ipfsError, setIpfsError] = useState('')\n\n    useEffect(() => {\n        async function initIpfs() {\n            if (ipfs !== null) return\n\n            ipfsMessage = 'Checking IPFS gateway...'\n\n            try {\n                // eslint-disable-next-line require-atomic-updates\n                ipfs = await ipfsClient(config)\n                const version = await ipfs.version()\n                ipfsVersion = version.version\n                ipfsMessage = `Connected to ${config.host}`\n            } catch (error) {\n                setIpfsError(`IPFS connection error: ${error.message}`)\n            }\n            setIpfsReady(Boolean(await ipfs.id()))\n        }\n\n        initIpfs()\n    }, [config])\n\n    useEffect(() => {\n        return function cleanup() {\n            if (ipfs) {\n                setIpfsReady(false)\n                ipfs = null\n                ipfsMessage = ''\n                ipfsVersion = ''\n                setIpfsError('')\n            }\n        }\n    }, [])\n\n    return { ipfs, ipfsVersion, isIpfsReady, ipfsError, ipfsMessage }\n}\n","import axios from 'axios'\nimport { Logger } from '@oceanprotocol/squid'\n\nexport function formatBytes(a: number, b: number) {\n    if (a === 0) return '0 Bytes'\n    const c = 1024\n    const d = b || 2\n    const e = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    const f = Math.floor(Math.log(a) / Math.log(c))\n\n    return parseFloat((a / Math.pow(c, f)).toFixed(d)) + ' ' + e[f]\n}\n\nexport function arraySum(array: number[]) {\n    return array.reduce((a, b) => a + b, 0)\n}\n\nexport function streamFiles(ipfs: any, files: any) {\n    return new Promise((resolve, reject) => {\n        const stream = ipfs.addReadableStream({\n            wrapWithDirectory: true\n            // progress: (length: number) =>\n            //     setFileSizeReceived(formatBytes(length, 0))\n        })\n\n        stream.on('data', (data: any) => {\n            Logger.log(`Added ${data.path} hash: ${data.hash}`)\n            // The last data event will contain the directory hash\n            if (data.path === '') resolve(data.hash)\n        })\n\n        stream.on('error', reject)\n        stream.write(files)\n        stream.end()\n    })\n}\n\nexport async function pingUrl(url: string) {\n    try {\n        const response = await axios(url)\n        if (response.status !== 200) Logger.error(`Not found: ${url}`)\n\n        Logger.log(`File found: ${url}`)\n        return true\n    } catch (error) {\n        Logger.error(error.message)\n    }\n    return false\n}\n\nexport function readFileAsync(file: File) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onerror = () => {\n            reader.abort()\n            reject(new DOMException('Problem parsing input file.'))\n        }\n        reader.onload = () => {\n            resolve(reader.result)\n        }\n        reader.readAsArrayBuffer(file)\n    })\n}\n","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport styles from './Dropzone.module.scss'\nimport { formatBytes } from '../../utils/utils'\n\nexport default function Dropzone({\n    handleOnDrop,\n    disabled,\n    multiple\n}: {\n    handleOnDrop(files: File[]): void\n    disabled?: boolean\n    multiple?: boolean\n}) {\n    const onDrop = useCallback(acceptedFiles => handleOnDrop(acceptedFiles), [\n        handleOnDrop\n    ])\n\n    const {\n        acceptedFiles,\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragReject\n    } = useDropzone({ onDrop })\n\n    const files = acceptedFiles.map((file: any) => (\n        <li key={file.path}>\n            {file.path} - {formatBytes(file.size, 0)}\n        </li>\n    ))\n\n    return (\n        <>\n            {acceptedFiles.length > 0 ? (\n                <aside className={styles.dropzoneFiles}>\n                    <ul>{files}</ul>\n                </aside>\n            ) : (\n                <div\n                    {...getRootProps({\n                        className: isDragActive\n                            ? styles.dragover\n                            : disabled\n                            ? styles.disabled\n                            : styles.dropzone\n                    })}\n                >\n                    <input {...getInputProps({ multiple })} />\n                    <p>\n                        {isDragActive && !isDragReject\n                            ? `Drop it like it's hot!`\n                            : multiple\n                            ? `Drag 'n' drop some files here, or click to select files`\n                            : `Drag 'n' drop a file here, or click to select a file`}\n                        {}\n                    </p>\n                </div>\n            )}\n        </>\n    )\n}\n","import React from 'react'\nimport styles from './Status.module.scss'\n\nexport default function Status({\n    message,\n    error,\n    isIpfsReady\n}: {\n    message: string\n    error?: string\n    isIpfsReady: boolean\n}) {\n    const classes = isIpfsReady\n        ? styles.success\n        : error\n        ? styles.error\n        : styles.message\n    return <div className={classes}>{error || message}</div>\n}\n","import React from 'react'\nimport Label from '../../../../components/atoms/Form/Label'\nimport Status from './Status'\nimport styles from './Form.module.scss'\n\nexport default function Form({\n    children,\n    ipfsMessage,\n    ipfsError,\n    isIpfsReady,\n    error\n}: {\n    children: any\n    ipfsMessage: string\n    ipfsError?: string\n    isIpfsReady: boolean\n    error?: string\n}) {\n    return (\n        <div className={styles.ipfsForm}>\n            <Label htmlFor=\"fileUpload\" required>\n                Add File To IPFS\n            </Label>\n            {children}\n            <Status\n                message={ipfsMessage}\n                isIpfsReady={isIpfsReady}\n                error={ipfsError || error}\n            />\n        </div>\n    )\n}\n","/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react'\nimport useIpfsApi, { IpfsConfig } from '../../../../hooks/use-ipfs-api'\nimport Spinner from '../../../../components/atoms/Spinner'\nimport Dropzone from '../../../../components/molecules/Dropzone'\nimport { formatBytes, pingUrl, streamFiles } from '../../../../utils/utils'\nimport { ipfsGatewayUri, ipfsNodeUri } from '../../../../config'\nimport Form from './Form'\n\nexport default function Ipfs({ addFile }: { addFile(url: string): void }) {\n    const { hostname, port, protocol } = new URL(ipfsNodeUri)\n\n    const ipfsConfig: IpfsConfig = {\n        protocol: protocol.replace(':', ''),\n        host: hostname,\n        port: port || '443'\n    }\n\n    const { ipfs, isIpfsReady, ipfsError, ipfsMessage } = useIpfsApi(ipfsConfig)\n    const [loading, setLoading] = useState(false)\n    const [message, setMessage] = useState('')\n    const [fileSize, setFileSize] = useState('')\n    const [fileSizeReceived] = useState('')\n    const [error, setError] = useState('')\n\n    useEffect(() => {\n        setMessage(\n            `Adding to IPFS<br />\n             <small>${fileSizeReceived || 0}/${fileSize}</small><br />`\n        )\n    }, [fileSize, fileSizeReceived])\n\n    async function addToIpfs(data: any) {\n        try {\n            const cid = await streamFiles(ipfs, data)\n            console.log(`File added: ${cid}`)\n            return cid\n        } catch (error) {\n            setError(`Adding to IPFS failed: ${error.message}`)\n            setLoading(false)\n        }\n    }\n\n    async function handleOnDrop(acceptedFiles: any) {\n        if (!acceptedFiles[0]) return\n\n        setLoading(true)\n        setError('')\n\n        const file = acceptedFiles[0]\n        const { path, size } = file\n        const totalSize = formatBytes(size, 0)\n        setFileSize(totalSize)\n\n        // Add file to IPFS node\n        const fileDetails = { path, content: file }\n\n        const cid = await addToIpfs(fileDetails)\n        if (!cid) return\n\n        // Ping gateway url to make it globally available,\n        // but store native url in DDO.\n        const urlGateway = `${ipfsGatewayUri}/ipfs/${cid}/${path}`\n        const url = `ipfs://${cid}/${path}`\n\n        setMessage('Checking IPFS gateway URL')\n\n        const isAvailable = await pingUrl(urlGateway)\n        // add IPFS url to file.url\n        isAvailable && addFile(url)\n    }\n\n    return (\n        <Form\n            error={error}\n            ipfsMessage={ipfsMessage}\n            ipfsError={ipfsError}\n            isIpfsReady={isIpfsReady}\n        >\n            {loading ? (\n                <Spinner message={message} />\n            ) : (\n                <Dropzone\n                    multiple={false}\n                    handleOnDrop={handleOnDrop}\n                    disabled={!isIpfsReady}\n                />\n            )}\n        </Form>\n    )\n}\n"],"sourceRoot":""}